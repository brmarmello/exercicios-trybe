import React, { Component } from 'react';

// Exr Fixando conte√∫do 1 e 2.
/*
const handleClickOne = () => {
  console.log('Clicou no bot√£o 1!');
}

const handleClickTwo = () => {
  console.log('Clicou no bot√£o 2!');
}

const handleClickThree = () => {
  console.log('Clicou no bot√£o 3!');
}

class App extends Component {
  render() {
    return (
      <div>
        <button onClick={ handleClickOne }>Meu Bot√£o 1</button>
        <button onClick={ handleClickTwo }>Meu Bot√£o 2</button>
        <button onClick={ handleClickThree }>Meu Bot√£o 3</button>
      </div>
    );
  }
}

export default App;
*/

// Exr Fixando conte√∫do 3 e 4.
/*
class App extends Component {
  constructor() {
    super();
    this.handleButtonOne = this.handleButtonOne.bind(this);
    this.handleButtonTwo = this.handleButtonTwo.bind(this);
    this.handleButtonThree = this.handleButtonThree.bind(this);
  }

  handleButtonOne() {
    console.log('"this" do bot√£o 1 :', this);
  }

  handleButtonTwo() {
    console.log('"this" do bot√£o 2 :', this);
  }

  handleButtonThree() {
    console.log('"this" do bot√£o 3 :', this);
  }
  render() {
    return (
      <div>
        <button onClick={this.handleButtonOne}>Bot√£o 1</button>
        <button onClick={this.handleButtonTwo}>Bot√£o 2</button>
        <button onClick={ this.handleButtonThree }>Bot√£o 3</button>
    </div>
    );
  }
}

export default App;

// Exr Fixando conte√∫do 5.
// Agora voc√™ vai converter sua aplica√ß√£o para uma que conta o n√∫mero de cliques dado em cada bot√£o! Primeiramente, defina um estado inicial para a contagem de cada bot√£o.
ü¶ú Dica: Uma possibilidade √© voc√™ definir tr√™s chaves, uma para cada bot√£o!

this.state = {
  clicksBtnOne: 0,
  clicksBtnTwo: 0,
  clicksBtnThree: 0,
};

// Exr Fixando conte√∫do 6.
// Agora, quando um bot√£o for clicado, altere de forma ass√≠ncrona o estado deste bot√£o de zero para um.

class App extends React.Component {
constructor() {
  super();

  this.handleButtonOne = this.handleButtonOne.bind(this);
  this.handleButtonTwo = this.handleButtonTwo.bind(this);
  this.handleButtonThree = this.handleButtonThree.bind(this);

  this.state = {
    clicksBtnOne: 0,
    clicksBtnTwo: 0,
    clicksBtnThree: 0,
  };
}

handleButtonOne() {
  this.setState(() => ({
    clicksBtnOne: 1,
  }));
}

handleButtonTwo() {
  this.setState(() => ({
    clicksBtnTwo: 1,
  }));
}

handleButtonThree() {
  this.setState(() => ({
    clicksBtnThree: 1,
  }));
}

  render() {
  return (
    <div>
      <button onClick={ this.handleButtonOne }>Bot√£o 1</button>
      <button onClick={ this.handleButtonTwo }>Bot√£o 2</button>
      <button onClick={ this.handleButtonThree }>Bot√£o 3</button>
    </div>
  );
}
}

export default App;

// Exr Fixando conte√∫do 7.
// Por fim, baseie-se no estado anterior ao atual para incrementar a contagem de cliques cada vez que um bot√£o for clicado!

class App extends React.Component {
constructor() {
  super();

  this.handleButtonOne = this.handleButtonOne.bind(this);
  this.handleButtonTwo = this.handleButtonTwo.bind(this);
  this.handleButtonThree = this.handleButtonThree.bind(this);

  this.state = {
    clicksBtnOne: 0,
    clicksBtnTwo: 0,
    clicksBtnThree: 0,
  };
}

handleButtonOne() {
  this.setState((prevState) => ({
    clicksBtnOne: prevState.clicksBtnOne + 1,
  }));
}

handleButtonTwo() {
  this.setState((prevState) => ({
    clicksBtnTwo: prevState.clicksBtnTwo + 1,
  }));
}

handleButtonThree() {
  // A √∫nica coisa diferente √© a desconstru√ß√£o.
  // Apenas um m√©todo diferente de fazer a mesma coisa
  // do que foi feito nas fun√ß√µes anteriores.
  this.setState(({ clicksBtnThree }) => ({
    clicksBtnThree: clicksBtnThree + 1,
  }));
}

render() {
  return (
    <div>
      <button onClick={ this.handleButtonOne }>Bot√£o 1 | Count = {this.state.clicksBtnOne}</button>
      <button onClick={ this.handleButtonTwo }>Bot√£o 2 | Count = {this.state.clicksBtnTwo}</button>
      <button onClick={ this.handleButtonThree }>Bot√£o 3 | Count = {this.state.clicksBtnThree}</button>
    </div>
  );
}
}

export default App;

// Exr Fixando conte√∫do 8.
// Defina uma l√≥gica que estabele√ßa que, quando o n√∫mero de cliques no bot√£o for par, ele deve ser verde.

class App extends React.Component {
constructor() {
  super();

  this.state = {
    clicksBtnOne: 0,
    clicksBtnTwo: 0,
    clicksBtnThree: 0,
  };

  this.handleButtonOne = this.handleButtonOne.bind(this);
  this.handleButtonTwo = this.handleButtonTwo.bind(this);
  this.handleButtonThree = this.handleButtonThree.bind(this);
}

handleButtonOne() {
  this.setState(({ clicksBtnOne }) => ({
    clicksBtnOne: clicksBtnOne + 1,
  }));
}

handleButtonTwo() {
  this.setState(({ clicksBtnTwo }) => ({
    clicksBtnTwo: clicksBtnTwo + 1,
  }));
}

handleButtonThree() {
  this.setState(({ clicksBtnThree }) => ({
    clicksBtnThree: clicksBtnThree + 1,
  }));
}

// Para essa fun√ß√£o, n√£o precisamos utilizar o bind porque ela √© utilizada
// apenas dentro do contexto do componente App
getButtonColor(num) {
  // Essa fun√ß√£o cont√©m um tern√°rio que realiza a l√≥gica para mudarmos
  // a cor do bot√£o para verde quando for um n√∫mero par
  return num % 2 === 0 ? 'green' : 'white';
}

render() {
  const { clicksBtnOne, clicksBtnTwo, clicksBtnThree } = this.state;
  return (
    <div>
      <button
        onClick={ this.handleButtonOne }
        // Para renderizarmos as cores, precisamos acrescentar a fun√ß√£o
        // que cont√©m a nossa l√≥gica ao "inline style", passando o estado
        // correspondente como par√¢metro
        style={{ backgroundColor: this.getButtonColor(clicksBtnOne) }}
      >
        Bot√£o 1 | Count = { clicksBtnOne }
      </button>
      <button
        onClick={ this.handleButtonTwo }
        style={{ backgroundColor: this.getButtonColor(clicksBtnTwo) }}
      >
        Bot√£o 2 | Count = { clicksBtnTwo }
      </button>
      <button
        onClick={ this.handleButtonThree }
        style={{ backgroundColor: this.getButtonColor(clicksBtnThree) }}
      >
        Bot√£o 3 | Count = { clicksBtnThree }
      </button>
    </div>
  );
}
}

export default App;

// Exr Fixando conte√∫do 9.
// A cor atual do bot√£o deve ser impressa num console.log() de dentro da fun√ß√£o do evento que lida com o clique. Fa√ßa isso acontecer!

class App extends React.Component {
constructor() {
  super();

  this.state = {
    clicksBtnOne: 0,
    clicksBtnTwo: 0,
    clicksBtnThree: 0,
  };

  this.handleButtonOne = this.handleButtonOne.bind(this);
  this.handleButtonTwo = this.handleButtonTwo.bind(this);
  this.handleButtonThree = this.handleButtonThree.bind(this);
}

handleButtonOne() {
  this.setState(({ clicksBtnOne }) => ({
    clicksBtnOne: clicksBtnOne + 1,
  }), () => {
    console.log(`Bot√£o 1 ${this.getButtonColor(this.state.clicksBtnOne)}`);
  });
}

handleButtonTwo() {
  this.setState(({ clicksBtnTwo }) => ({
    clicksBtnTwo: clicksBtnTwo + 1,
  }), () => {
    console.log(`Bot√£o 2 ${this.getButtonColor(this.state.clicksBtnTwo)}`);
  });
}

handleButtonThree() {
  this.setState(({ clicksBtnThree }) => ({
    clicksBtnThree: clicksBtnThree + 1,
  }), () => {
    // Aqui imprimimos a cor no console ap√≥s o setState atualizar
    // a quantidade de clicks no bot√£o
    console.log(`Bot√£o 3 ${this.getButtonColor(this.state.clicksBtnThree)}`);
  });
}

getButtonColor(num) {
  return num % 2 === 0 ? 'green' : 'white';
}

render() {
  const { clicksBtnOne, clicksBtnTwo, clicksBtnThree } = this.state;
  return (
    <div>
      <button
        onClick={ this.handleButtonOne }
        style={{ backgroundColor: this.getButtonColor(clicksBtnOne) }}
      >
        Bot√£o 1 | Count = { clicksBtnOne }
      </button>
      <button
        onClick={ this.handleButtonTwo }
        style={{ backgroundColor: this.getButtonColor(clicksBtnTwo) }}
      >
        Bot√£o 2 | Count = { clicksBtnTwo }
      </button>
      <button
        onClick={ this.handleButtonThree }
        style={{ backgroundColor: this.getButtonColor(clicksBtnThree) }}
      >
        Bot√£o 3 | Count = { clicksBtnThree }
      </button>
    </div>
  );
}
}

export default App;

*/

class App extends Component {
  constructor() {
    super()
    /* Para definir um estado inicial ao componente, a ser definido
    no momento em que o componente for colocado na tela, fa√ßa uma atribui√ß√£o
    de um objeto √† chave "state" do "this", ou seja, ao "this.state"*/
    this.handleClick = this.handleClick.bind(this)
    this.state = {
      numeroDeCliques: 0
    }
  }
  // state = {};

  handleClick() {
     /* Voc√™ **NUNCA** deve fazer atribui√ß√µes diretamente a "this.state". Deve,
    ao inv√©s disso, SEMPRE utilizar a fun√ß√£o "this.setState(novoEstado)" do
    React*/
    this.setState((estadoAnterior, _props) => ({
      numeroDeCliques: estadoAnterior.numeroDeCliques + 1
    }))
  }

  render() {
    /*Para LER o estado, voc√™ pode usar "this.state.chaveDoMeuEstado"*/
    // console.log(this)
    return <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>
  }
}

export default App;

// OBS.: Para essa pequena e simples aplica√ß√£o de ter um bot√£o que clicamos e ele atualiza o n√∫mero de cliques que foi dado dentro dele, tivemos que saber:
/*
1) Estado;
2) Eventos;
3) Fazer bind;
4) E tivemos que saber que o Estado √© ass√≠ncrono e como que atualizamos um Estado, usando como base o Estado anterior.
*/
// SABER ESTADO E EVENTOS √â O CORA√á√ÉO DO REACT!!! ESSE √â O PODER!!! Os outros assuntos adiante no m√≥dulo de Front, s√£o praticamente acess√≥rios destes.